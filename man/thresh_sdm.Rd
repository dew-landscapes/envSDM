% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/thresh_sdm.R
\name{thresh_sdm}
\alias{thresh_sdm}
\title{Threshold a previously predicted SDM}
\usage{
thresh_sdm(
  pred_file,
  this_taxa = NULL,
  threshold,
  thresh_file = NULL,
  terra_options = NULL,
  force_new = FALSE,
  do_gc = FALSE,
  check_tifs = TRUE
)
}
\arguments{
\item{pred_file}{Character. File path of predicted sdm to threshold.}

\item{this_taxa}{Character. If left as default \code{NULL} an attempt will be made
to extract a taxa name from \code{pred_file}}

\item{threshold}{Numeric. > 0 and < 1. Threshold to apply to the raster
stored in the file at \code{pred_file}. Often this value will be available within
the result of a call to \code{tune_sdm()}. e.g. \code{mod <- rio::import("tune.rds")}
and then \code{mod$e[[1]]@thresholds$max_spec_sens}}

\item{thresh_file}{Character. Name to give the output threshold. If left as
default \code{NULL}, \code{thresh_file} will be set to
\code{gsub("pred", "thresh", pred_file)}}

\item{terra_options}{Passed to \code{terra::terraOptions()}. e.g. list(memfrac =
0.6)}

\item{force_new}{Logical. If output files already exist, should they be
remade?}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful to keep RAM use down when running SDMs for many, many taxa,
especially if done in parallel.}

\item{check_tifs}{Logical. Check if any output \code{.tif} files error on
\code{terra::rast()} and delete them if they do. Useful after a crash during
pred_file.}
}
\value{
Character path to threshold file, usually 'thresh.tif'. Output .tif
and .log, written to \code{out_dir}.
}
\description{
Threshold a previously predicted SDM
}
\examples{

  # setup -------
  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  # data ------
  extract_thresh <- function(tune, metric, thresh_type = "max_spec_sens") {

    tune |>
      dplyr::filter(!!rlang::ensym(metric) == max(!!rlang::ensym(metric))) |>
      dplyr::pull(!!rlang::ensym(thresh_type))

  }

  data <- fs::path(system.file(package = "envSDM"), "examples") |>
    fs::dir_ls(regexp = "pred\\\\.tif"
               , recurse = TRUE
               ) |>
    tibble::enframe(name = NULL, value = "pred") |>
    dplyr::mutate(out_dir = dirname(pred)
                  , taxa = basename(dirname(out_dir))
                  , metric = basename(out_dir)
                  , tune = fs::dir_ls(out_dir, regexp = "full_run.rds")
                  , tune_mean = purrr::map(tune, \(x) rio::import(x, trust = TRUE)$tune_mean |> dplyr::select(algo, tune_args, auc_po, combo, max_spec_sens))
                  , thresh = purrr::map2_dbl(tune_mean
                                             , metric
                                             , extract_thresh
                                             )

                  )

  ## thresh -------
  purrr::pwalk(list(data$pred
                    , data$thresh
                    , data$taxa
                    )
               , \(a, b, c) thresh_sdm(pred_file = a
                                       , threshold = b
                                       , this_taxa = c
                                       , thresh_file = "thresh.tif"
                                       #, force_new = TRUE
                                       )
               )

  ## visualise-------
  ### threshold -------
  purrr::walk(data$out_dir
              , \(x) fs::path(x, "thresh.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )






}
