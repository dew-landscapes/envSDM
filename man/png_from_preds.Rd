% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/png_from_preds.R
\name{png_from_preds}
\alias{png_from_preds}
\title{Generate .png (map) files for each prediction}
\usage{
png_from_preds(
  pred_dir,
  full_run_dir = NULL,
  trim = TRUE,
  force_new = FALSE,
  do_gc = TRUE,
  ...
)
}
\arguments{
\item{trim}{Logical. Trim NA values from outside (using \code{terra::trim()})}

\item{force_new}{Logical. If .png file already exists, recreate it?}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful when running SDMs for many, many taxa, especially if done in
parallel.}

\item{...}{Passed to \code{fs::dir_ls()}}

\item{prep}{Character or named list. If character, the path to an existing
\code{prep.rds}. Otherwise, the result of a call to \code{prep_sdm()} with return_val =
"object".}

\item{full_run}{Character or named list. If character, the path to an
existing \code{full_run.rds}. Otherwise, the result of a call to \code{run_full_sdm}()
with return_val = "object".}

\item{out_dir}{Character. Name of directory into which \code{.pngs}s will be
saved. Will be created if it does not exist.}
}
\value{
\code{invisible(NULL)}. Writes .png files with the same file name as any
.tif files
}
\description{
Finds any .tif files in \code{pred_dir} and writes them to .png files. Includes the
retrieval and addition to the map of: various SDM metrics; and the original
presence points.
}
\examples{

  # setup -------
  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  # predictors -------
  preds <- fs::dir_ls(fs::path(out_dir, "tif"))


  # data ------
  data <- fs::path(system.file(package = "envSDM"), "examples") |>
    fs::dir_ls(regexp = "prep\\\\.rds$"
               , recurse = TRUE
               ) |>
    tibble::enframe(name = NULL, value = "prep") |>
    dplyr::mutate(taxa = gsub("\\\\.rds", "", basename(dirname(prep)))
                  , tune = gsub("prep", "tune", prep)
                  , out_dir = fs::path(out_dir, taxa, "combo")
                  )

  # Best combo--------
  ## run full SDM --------
  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "combo"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         , force_new = FALSE
                                         )
               )


  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = preds
                                     , check_tifs = TRUE
                                     , force_new = FALSE
                                     )
               )

  ## .pngs -------
  if(FALSE) {

    # not working for binary 'thresh' rasters (due to an issue with number of 'classes"?):
      # Error in if (any(na.omit(x) < min(breaks)) && show.warnings) warning("Values have found that are less than the lowest break",  :
      # missing value where TRUE/FALSE needed
    purrr::walk2(data$out_dir
                 , data$out_dir
                 , \(x, y) png_from_preds(pred_dir = x
                                          , tune_dir = y
                                          , trim = FALSE
                                          , recurse = 1
                                          )
                 )

  }

  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir[file.exists(fs::path(data$out_dir, "pred.tif"))]
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  # Best auc--------
  ## run full SDM --------
  data <- data \%>\%
    dplyr::mutate(out_dir = gsub("combo", "auc_po", out_dir))

  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "auc_po"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         , force_new = FALSE
                                         )
              )

  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = preds
                                     , is_env_pred = FALSE
                                     , check_tifs = TRUE
                                     , force_new = FALSE
                                     )
               )


  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir[file.exists(fs::path(data$out_dir, "pred.tif"))]
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )




}
