% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/predict_sdm.R
\name{predict_sdm}
\alias{predict_sdm}
\title{Predict from SDM}
\usage{
predict_sdm(
  prep,
  full_run,
  out_dir,
  file_name = "pred.tif",
  use_env_naming = FALSE,
  predictors = NULL,
  is_env_pred = FALSE,
  terra_options = NULL,
  doClamp = TRUE,
  force_new = FALSE,
  do_gc = FALSE,
  check_tifs = FALSE,
  handle_errors = TRUE,
  ...
)
}
\arguments{
\item{prep}{Character or named list. If character, the path to an existing
\code{prep.rds}. Otherwise, the result of a call to \code{prep_sdm()} with return_val =
"object".}

\item{full_run}{Character or named list. If character, the path to an
existing \code{full_run.rds}. Otherwise, the result of a call to \code{run_full_sdm()}
with return_val = "object".}

\item{out_dir}{Character. Name of directory into which \code{.tif}s will be saved.
Will be created if it does not exist.}

\item{file_name}{Character. Name to give the output prediction .tif.}

\item{use_env_naming}{Logical. If \code{TRUE}, and \code{is_env_pred} is \code{TRUE}, naming
will ignore \code{file_name} and instead generate a name matching
\code{name_env_tif()} with \code{layer} being \code{this_taxa} from \code{prep} and \code{start_date}
being the minimum available \code{start_date} from the predictors. \code{pred} appears
between \code{this_taxa} and \code{start_date}.}

\item{predictors}{Character. Vector of paths to predictor \code{.tif} files.}

\item{is_env_pred}{Logical. Does the naming of the directory and files in
\code{predictors} follow the pattern required by \code{envRaster::parse_env_tif()}?}

\item{terra_options}{Passed to \code{terra::terraOptions()}. e.g. list(memfrac =
0.6)}

\item{doClamp}{Passed to \code{terra::predict()} (which then passes as \code{...} to
\code{fun}). Possibly orphaned from older envSDM?}

\item{force_new}{Logical. If output files already exist, should they be
remade?}

\item{do_gc}{Logical. Run \code{base::rm(list = ls)} and \code{base::gc()} at end of
function? Useful to keep RAM use down when running SDMs for many, many taxa,
especially if done in parallel.}

\item{check_tifs}{Logical. Check if any output \code{.tif} files error on
\code{terra::rast()} and delete them if they do. Useful after a crash during
predict.}

\item{handle_errors}{Logical. Use purrr::safely when predicting, enabling the
capture of (m)any errors (which are then written to the log). Suggest turning
off (i.e. \code{handle_errors = FALSE}) when running in a targets pipeline.}

\item{...}{Passed to \code{...} in \code{terra::mask()} - the last step in the
\code{envSDM::predict_sdm} process. Used to provide additional arguments to
\code{terra::writeRaster}.}
}
\value{
Character path to predicted file, usually 'pred.tif'. Output .tif
and .log, written to \code{out_dir}.
}
\description{
The resulting \code{pred.tif} is masked to the boundary provided to the
\code{pred_limit} argument of prep_sdm; or generated in prep_sdm from the
\code{pred_limit}, \code{limit_buffer} and \code{pred_clip} arguments.
}
\examples{

  # setup -------
  out_dir <- file.path(system.file(package = "envSDM"), "examples")

  # predictors -------
  preds <- fs::dir_ls(fs::path(out_dir, "tif"))


  # data ------
  data <- fs::path(system.file(package = "envSDM"), "examples") |>
    fs::dir_ls(regexp = "prep\\\\.rds$"
               , recurse = TRUE
               ) |>
    tibble::enframe(name = NULL, value = "prep") |>
    dplyr::mutate(taxa = gsub("\\\\.rds", "", basename(dirname(prep)))
                  , tune = gsub("prep", "tune", prep)
                  , out_dir = fs::path(out_dir, taxa, "combo")
                  )

  # Best combo--------
  ## run full SDM --------
  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "combo"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         #, force_new = TRUE
                                         )
               )


  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = preds
                                     , check_tifs = TRUE
                                     #, force_new = TRUE
                                     )
               )

  ## .pngs -------
  if(FALSE) {

    # not working for binary 'thresh' rasters (due to an issue with number of 'classes"?):
      # Error in if (any(na.omit(x) < min(breaks)) && show.warnings) warning("Values have found that are less than the lowest break",  :
      # missing value where TRUE/FALSE needed
    purrr::walk2(data$out_dir
                 , data$out_dir
                 , \(x, y) png_from_preds(pred_dir = x
                                          , tune_dir = y
                                          , trim = FALSE
                                          , recurse = 1
                                          )
                 )

  }

  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir[file.exists(fs::path(data$out_dir, "pred.tif"))]
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )

  # Best auc--------
  ## run full SDM --------
  data <- data \%>\%
    dplyr::mutate(out_dir = gsub("combo", "auc_po", out_dir))

  purrr::pmap(list(data$prep
                    , data$tune
                    , data$out_dir
                    )
               , \(a, b, c) run_full_sdm(prep = a
                                         , tune = b
                                         , out_dir = c
                                         , use_metric = "auc_po"

                                         # passed to tune_sdm via dots
                                         , metrics_df = envSDM::sdm_metrics
                                         #, force_new = TRUE
                                         )
              )

  ## predict -------
  purrr::pwalk(list(data$prep
                    , data$out_dir
                    )
               , \(a, b) predict_sdm(prep = a
                                     , full_run = fs::path(b, "full_run.rds")
                                     , out_dir = b
                                     , predictors = preds
                                     , is_env_pred = FALSE
                                     , check_tifs = TRUE
                                     #, force_new = TRUE
                                     )
               )


  ## visualise-------
  ### mask -------
  purrr::walk(data$out_dir[file.exists(fs::path(data$out_dir, "pred.tif"))]
              , \(x) fs::path(x, "pred.tif") \%>\%
                terra::rast() \%>\%
                terra::trim() \%>\%
                terra::plot()
              )




}
